/* Auto-generated by genmsg_cpp for file /home/peko/tfg_git/sandbox/TFG/msg/Features2D.msg */
#ifndef TFG_MESSAGE_FEATURES2D_H
#define TFG_MESSAGE_FEATURES2D_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "std_msgs/Float32MultiArray.h"
#include "std_msgs/Float32MultiArray.h"

namespace TFG
{
template <class ContainerAllocator>
struct Features2D_ {
  typedef Features2D_<ContainerAllocator> Type;

  Features2D_()
  : header()
  , user_id(0)
  , name()
  , descriptors()
  , keypoints()
  {
  }

  Features2D_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , user_id(0)
  , name(_alloc)
  , descriptors(_alloc)
  , keypoints(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int32_t _user_id_type;
  int32_t user_id;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  name;

  typedef std::vector< ::std_msgs::Float32MultiArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::other >  _descriptors_type;
  std::vector< ::std_msgs::Float32MultiArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::other >  descriptors;

  typedef std::vector< ::std_msgs::Float32MultiArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::other >  _keypoints_type;
  std::vector< ::std_msgs::Float32MultiArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::other >  keypoints;


  typedef boost::shared_ptr< ::TFG::Features2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::TFG::Features2D_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Features2D
typedef  ::TFG::Features2D_<std::allocator<void> > Features2D;

typedef boost::shared_ptr< ::TFG::Features2D> Features2DPtr;
typedef boost::shared_ptr< ::TFG::Features2D const> Features2DConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::TFG::Features2D_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::TFG::Features2D_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace TFG

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::TFG::Features2D_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::TFG::Features2D_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::TFG::Features2D_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9ea5e5e3ee33e1eb0fc171ce5ad4a203";
  }

  static const char* value(const  ::TFG::Features2D_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9ea5e5e3ee33e1ebULL;
  static const uint64_t static_value2 = 0x0fc171ce5ad4a203ULL;
};

template<class ContainerAllocator>
struct DataType< ::TFG::Features2D_<ContainerAllocator> > {
  static const char* value() 
  {
    return "TFG/Features2D";
  }

  static const char* value(const  ::TFG::Features2D_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::TFG::Features2D_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
int32 user_id\n\
string[] name\n\
std_msgs/Float32MultiArray[] descriptors\n\
std_msgs/Float32MultiArray[] keypoints\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32MultiArray\n\
# Please look at the MultiArrayLayout message definition for\n\
# documentation on all multiarrays.\n\
\n\
MultiArrayLayout  layout        # specification of data layout\n\
float32[]         data          # array of data\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayLayout\n\
# The multiarray declares a generic multi-dimensional array of a\n\
# particular data type.  Dimensions are ordered from outer most\n\
# to inner most.\n\
\n\
MultiArrayDimension[] dim # Array of dimension properties\n\
uint32 data_offset        # padding bytes at front of data\n\
\n\
# Accessors should ALWAYS be written in terms of dimension stride\n\
# and specified outer-most dimension first.\n\
# \n\
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n\
#\n\
# A standard, 3-channel 640x480 image with interleaved color channels\n\
# would be specified as:\n\
#\n\
# dim[0].label  = \"height\"\n\
# dim[0].size   = 480\n\
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n\
# dim[1].label  = \"width\"\n\
# dim[1].size   = 640\n\
# dim[1].stride = 3*640 = 1920\n\
# dim[2].label  = \"channel\"\n\
# dim[2].size   = 3\n\
# dim[2].stride = 3\n\
#\n\
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\
================================================================================\n\
MSG: std_msgs/MultiArrayDimension\n\
string label   # label of given dimension\n\
uint32 size    # size of given dimension (in type units)\n\
uint32 stride  # stride of given dimension\n\
";
  }

  static const char* value(const  ::TFG::Features2D_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::TFG::Features2D_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::TFG::Features2D_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::TFG::Features2D_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.user_id);
    stream.next(m.name);
    stream.next(m.descriptors);
    stream.next(m.keypoints);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Features2D_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::TFG::Features2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::TFG::Features2D_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "user_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.user_id);
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "descriptors[]" << std::endl;
    for (size_t i = 0; i < v.descriptors.size(); ++i)
    {
      s << indent << "  descriptors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.descriptors[i]);
    }
    s << indent << "keypoints[]" << std::endl;
    for (size_t i = 0; i < v.keypoints.size(); ++i)
    {
      s << indent << "  keypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.keypoints[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // TFG_MESSAGE_FEATURES2D_H

