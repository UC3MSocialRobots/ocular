/* Auto-generated by genmsg_cpp for file /home/peko/tfg_git/sandbox/pi_tracker/srv/SetCommand.srv */
#ifndef PI_TRACKER_SERVICE_SETCOMMAND_H
#define PI_TRACKER_SERVICE_SETCOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace pi_tracker
{
template <class ContainerAllocator>
struct SetCommandRequest_ {
  typedef SetCommandRequest_<ContainerAllocator> Type;

  SetCommandRequest_()
  : command()
  {
  }

  SetCommandRequest_(const ContainerAllocator& _alloc)
  : command(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  command;


  typedef boost::shared_ptr< ::pi_tracker::SetCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pi_tracker::SetCommandRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetCommandRequest
typedef  ::pi_tracker::SetCommandRequest_<std::allocator<void> > SetCommandRequest;

typedef boost::shared_ptr< ::pi_tracker::SetCommandRequest> SetCommandRequestPtr;
typedef boost::shared_ptr< ::pi_tracker::SetCommandRequest const> SetCommandRequestConstPtr;



template <class ContainerAllocator>
struct SetCommandResponse_ {
  typedef SetCommandResponse_<ContainerAllocator> Type;

  SetCommandResponse_()
  {
  }

  SetCommandResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::pi_tracker::SetCommandResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pi_tracker::SetCommandResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetCommandResponse
typedef  ::pi_tracker::SetCommandResponse_<std::allocator<void> > SetCommandResponse;

typedef boost::shared_ptr< ::pi_tracker::SetCommandResponse> SetCommandResponsePtr;
typedef boost::shared_ptr< ::pi_tracker::SetCommandResponse const> SetCommandResponseConstPtr;


struct SetCommand
{

typedef SetCommandRequest Request;
typedef SetCommandResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetCommand
} // namespace pi_tracker

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pi_tracker::SetCommandRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pi_tracker::SetCommandRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pi_tracker::SetCommandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cba5e21e920a3a2b7b375cb65b64cdea";
  }

  static const char* value(const  ::pi_tracker::SetCommandRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcba5e21e920a3a2bULL;
  static const uint64_t static_value2 = 0x7b375cb65b64cdeaULL;
};

template<class ContainerAllocator>
struct DataType< ::pi_tracker::SetCommandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pi_tracker/SetCommandRequest";
  }

  static const char* value(const  ::pi_tracker::SetCommandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pi_tracker::SetCommandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string command\n\
\n\
";
  }

  static const char* value(const  ::pi_tracker::SetCommandRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pi_tracker::SetCommandResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pi_tracker::SetCommandResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pi_tracker::SetCommandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::pi_tracker::SetCommandResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::pi_tracker::SetCommandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pi_tracker/SetCommandResponse";
  }

  static const char* value(const  ::pi_tracker::SetCommandResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pi_tracker::SetCommandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::pi_tracker::SetCommandResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pi_tracker::SetCommandResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pi_tracker::SetCommandRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.command);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetCommandRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pi_tracker::SetCommandResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetCommandResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<pi_tracker::SetCommand> {
  static const char* value() 
  {
    return "cba5e21e920a3a2b7b375cb65b64cdea";
  }

  static const char* value(const pi_tracker::SetCommand&) { return value(); } 
};

template<>
struct DataType<pi_tracker::SetCommand> {
  static const char* value() 
  {
    return "pi_tracker/SetCommand";
  }

  static const char* value(const pi_tracker::SetCommand&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<pi_tracker::SetCommandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cba5e21e920a3a2b7b375cb65b64cdea";
  }

  static const char* value(const pi_tracker::SetCommandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<pi_tracker::SetCommandRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pi_tracker/SetCommand";
  }

  static const char* value(const pi_tracker::SetCommandRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<pi_tracker::SetCommandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cba5e21e920a3a2b7b375cb65b64cdea";
  }

  static const char* value(const pi_tracker::SetCommandResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<pi_tracker::SetCommandResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pi_tracker/SetCommand";
  }

  static const char* value(const pi_tracker::SetCommandResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PI_TRACKER_SERVICE_SETCOMMAND_H

