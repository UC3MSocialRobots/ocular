/* Auto-generated by genmsg_cpp for file /home/irene/repos/ros_ws/sandbox/TFG/msg/HandLocPx.msg */
#ifndef TFG_MESSAGE_HANDLOCPX_H
#define TFG_MESSAGE_HANDLOCPX_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace TFG
{
template <class ContainerAllocator>
struct HandLocPx_ {
  typedef HandLocPx_<ContainerAllocator> Type;

  HandLocPx_()
  : header()
  , user_id(0)
  , name()
  , points()
  {
  }

  HandLocPx_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , user_id(0)
  , name(_alloc)
  , points(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int32_t _user_id_type;
  int32_t user_id;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  name;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _points_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  points;


  typedef boost::shared_ptr< ::TFG::HandLocPx_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::TFG::HandLocPx_<ContainerAllocator>  const> ConstPtr;
}; // struct HandLocPx
typedef  ::TFG::HandLocPx_<std::allocator<void> > HandLocPx;

typedef boost::shared_ptr< ::TFG::HandLocPx> HandLocPxPtr;
typedef boost::shared_ptr< ::TFG::HandLocPx const> HandLocPxConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::TFG::HandLocPx_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::TFG::HandLocPx_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace TFG

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::TFG::HandLocPx_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::TFG::HandLocPx_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::TFG::HandLocPx_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a9a8f5a34f4211eea09f9e48db5ff449";
  }

  static const char* value(const  ::TFG::HandLocPx_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa9a8f5a34f4211eeULL;
  static const uint64_t static_value2 = 0xa09f9e48db5ff449ULL;
};

template<class ContainerAllocator>
struct DataType< ::TFG::HandLocPx_<ContainerAllocator> > {
  static const char* value() 
  {
    return "TFG/HandLocPx";
  }

  static const char* value(const  ::TFG::HandLocPx_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::TFG::HandLocPx_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
int32 user_id\n\
string[] name\n\
int32[] points\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::TFG::HandLocPx_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::TFG::HandLocPx_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::TFG::HandLocPx_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::TFG::HandLocPx_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.user_id);
    stream.next(m.name);
    stream.next(m.points);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HandLocPx_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::TFG::HandLocPx_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::TFG::HandLocPx_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "user_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.user_id);
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.points[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // TFG_MESSAGE_HANDLOCPX_H

